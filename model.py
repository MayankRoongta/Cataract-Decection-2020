# -*- coding: utf-8 -*-
"""cataract-detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-F0H8oRENhnBTzw21JswkEjrRYvsQQHc
"""

import pandas as pd
import numpy as np
import numpy as np

from sklearn.metrics import accuracy_score,confusion_matrix

import pickle

data = pd.read_csv("cataract.csv")

#data.head()

data["BMI_Class"].unique()

data.columns

final_data=data[['Age', 'BMI_Class', 'Use_Lenses',
       'Diabetes','High_Cholesterol','Have_Myopia', 'Smoking',   'Alcohol', 
       'Risk_of_cataracts']]

final_data.head()

final_data.head()

# Import label encoder
from sklearn import preprocessing

# label_encoder object knows how to understand word labels.
label_encoder = preprocessing.LabelEncoder()

final_data['Risk_of_cataracts']= label_encoder.fit_transform(final_data['Risk_of_cataracts'])

#final_data.head()

"""
final_data=pd.get_dummies(final_data,drop_first=True)

#Storing the column names
columns_list=list(final_data.columns)
print(columns_list)

#Separating the input names from data
features=list(set(columns_list)-set(['Risk_of_cataracts']))
print(features)
"""

final_data['BMI_Class']= label_encoder.fit_transform(final_data['BMI_Class'])

final_data['Use_Lenses']= label_encoder.fit_transform(final_data['Use_Lenses'])

final_data['High_Cholesterol']= label_encoder.fit_transform(final_data['High_Cholesterol'])
final_data['Diabetes']= label_encoder.fit_transform(final_data['Diabetes'])
final_data['Have_Myopia']= label_encoder.fit_transform(final_data['Have_Myopia'])
final_data['Smoking']= label_encoder.fit_transform(final_data['Smoking'])
final_data['Alcohol']= label_encoder.fit_transform(final_data['Alcohol'])


#final_data.head()

#Storing the values from input features
X = final_data.drop(["Risk_of_cataracts"],axis = 1)

#x=final_data[features].values
print(X)

#Storing the output values in y
y=final_data['Risk_of_cataracts'].values
print(y)
#To partition the data
from sklearn.model_selection import train_test_split

#Splitting the data into train and test
train_x,test_x,train_y,test_y = train_test_split(X,y,test_size=0.3,random_state=0)

print(test_x)

# Import the model we are using
from sklearn.ensemble import RandomForestClassifier

# Instantiate model with 1000 decision trees
rf = RandomForestClassifier(n_estimators = 10)

# Train the model on training data
rf.fit(train_x, train_y)

# Use the forest's predict method on the test data
prediction = rf.predict(test_x)
print(prediction)
prediction = np.around(prediction)

prediction = prediction.astype(int)
print(prediction)

# Confusion matrix
confusion_matrix3= confusion_matrix(test_y,prediction)
print(confusion_matrix3)

# Accuracy calculation
accuracy_score3 = accuracy_score(test_y,prediction)
print(accuracy_score3)

# Calculate the absolute errors
errors = abs(prediction - test_y)
print(errors)

# Missclassified values from prediction
print("Missclassified samples : %d" % (test_y != prediction).sum())

rf.predict([[ 43 , 1,  1,  1 , 0 ,  1,  1,  1]])

#pip install numpy

# open a file, where you ant to store the data
file = open('random_forest_classifier_model.pkl', 'wb')

# dump information to that file
pickle.dump(rf, file)

